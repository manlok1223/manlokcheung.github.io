package student;

public class UnoWarMatch {
    /**
     * The first AI player participating in the match.
     */
    private AI ai1;
    /**
     * The second AI player participating in the match.
     */
    private AI ai2;

    /**
     * Constructs a UnoWarMatch with two AI players.
     *
     * @param ai1 the first AI player
     * @param ai2 the second AI player
     */
    public UnoWarMatch(AI ai1, AI ai2) {
        this.ai1 = ai1;
        this.ai2 = ai2;
    }
    /**
     * Plays a single game of UnoWar between the two AI players.
     * The game continues until one player reaches 10 points by winning rounds.
     *
     * @return true if ai1 wins the game, false if ai2 wins
     */
    public boolean playGame() {
        Deck deck = new Deck();
        Hand hand1 = new Hand(deck, 5);
        Hand hand2 = new Hand(deck, 5);
        int score1 = 0;
        int score2 = 0;
        boolean ai1Turn = true;

        while (score1 < 10 && score2 < 10) {
            CardPile pile = new CardPile(deck.draw());

            boolean roundOver = false;
            while (!roundOver) {
                AI currentAI = ai1Turn ? ai1 : ai2;
                Hand currentHand = ai1Turn ? hand1 : hand2;

                Card cardToPlay = currentAI.getPlay(currentHand, pile);
                if (cardToPlay == null || !pile.canPlay(cardToPlay)) {
                    if (ai1Turn) {
                        score2++;
                    } else {
                        score1++;
                    }
                    roundOver = true;
                } else {
                    pile.play(cardToPlay);
                    currentHand.remove(cardToPlay);
                }
                ai1Turn = !ai1Turn;
            }
        }
        return score1 >= 10;
    }
    /**
     * Simulates multiple games between the two AI players and calculates the win rate for ai1.
     *
     * @param nTrials the number of games to simulate
     * @return the win rate for ai1 as a double between 0 and 1
     */
    public double winRate(int nTrials) {
        int wins = 0;
        for (int i = 0; i < nTrials; i++) {
            if (playGame()) {
                wins++;
            }
        }
        return (double) wins / nTrials;
    }
}